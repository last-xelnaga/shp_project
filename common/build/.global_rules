
C        = $(PREFIX)gcc
CC       = $(PREFIX)g++
OBJCOPY  = $(PREFIX)objcopy

CFLAGS   = $(FLAGS) -DDEBUG_TAG="$(TARGET)" -pedantic -Wall -Wextra -std=c99
CXXFLAGS = $(FLAGS) -DDEBUG_TAG="$(TARGET)" -pedantic -Wall -Wextra -std=c++11
RELFLAGS = -O2
DBGFLAGS = -O0 -g3 -ggdb -DDEBUG

OBJC     = $(SRCC:%.c=$(OBJDIR)/%.o)
COMPILEC = $(C) -c $(CFLAGS) $(INC) $< -o $@
STDOUTC  = $$(echo $(COMPILEC) | sed -e 's/$(notdir $<)/\\\e[1;33m$(notdir $<)\\\e[0m/g' -e 's/$(notdir $@)/\\\e[1;33m$(notdir $@)\\\e[0m/g')
STDERRC  = $$($(COMPILEC) 2>&1 | sed -e 's/$(notdir $<)/\\\e[1;33m$(notdir $<)\\\e[0m/g' -e 's/error/\\\e[1;31merror\\\e[0m/g' -e 's/warning/\\\e[1;33mwarning\\\e[0m/g')

$(OBJDIR)/%.o :%.c
	rm -f $(OBJDIR)/$@
	@echo -e "$(STDOUTC)\n$(STDERRC)"

OBJCPP     = $(SRCCPP:%.cpp=$(OBJDIR)/%.o)
COMPILECXX = $(CC) -c $(CXXFLAGS) $(INC) $< -o $@
STDOUTCXX  = $$(echo $(COMPILECXX) | sed -e 's/$(notdir $<)/\\\e[1;33m$(notdir $<)\\\e[0m/g' -e 's/$(notdir $@)/\\\e[1;33m$(notdir $@)\\\e[0m/g')
STDERRCXX  = $$($(COMPILECXX) 2>&1 | sed -e 's/$(notdir $<)/\\\e[1;33m$(notdir $<)\\\e[0m/g' -e 's/error/\\\e[1;31merror\\\e[0m/g' -e 's/warning/\\\e[1;33mwarning\\\e[0m/g')

$(OBJDIR)/%.o :%.cpp
	rm -f $(OBJDIR)/$@
	@echo -e "$(STDOUTCXX)\n$(STDERRCXX)"


.PHONY: all clean debug release profile deploy trace

all: debug

executable: $(OBJDIR) $(TARGET)

debug: CFLAGS  += $(DBGFLAGS)
debug: CXXFLAGS += $(DBGFLAGS)
debug: executable

release: clean
release: CFLAGS += $(RELFLAGS)
release: CXXFLAGS += $(RELFLAGS) -fomit-frame-pointer -fno-asynchronous-unwind-tables -fno-unwind-tables
release: strip

strip: executable
	@echo -e "\e[00;32mstripping...\e[00m"
	$(OBJCOPY) --strip-all $(TARGET)
	$(OBJCOPY) --remove-section=.note.ABI-tag $(TARGET)
	$(OBJCOPY) --remove-section=.note.gnu.build-id $(TARGET)
	$(OBJCOPY) --remove-section=.comment $(TARGET)
	$(OBJCOPY) --remove-section=.jcr $(TARGET)
	@echo
	@echo -e "\e[00;32minfo\e[00m"
	size $(TARGET)
	@echo

$(OBJDIR):
	@echo -e "\e[00;32mcreate obj directory\e[00m"
	mkdir -vp $(OBJDIR)
	@echo

$(TARGET): $(OBJCPP) $(OBJC)
	@echo
	@echo -e "\e[00;32mlinking...\e[00m"
	$(CC) -o $@ $(OBJCPP) $(OBJC) $(LIB)
	@echo

clean:
	@echo -e "\e[00;32mclean target\e[00m"
	rm -rf $(OBJDIR) $(TARGET)
	@echo

profile: clean debug
	valgrind --leak-check=full --show-leak-kinds=all ./$(TARGET)

deploy: release
	./deploy.sh
	@echo

trace: debug
	gdb ./$(TARGET) run
